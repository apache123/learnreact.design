<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Backstage</title>
 <link href="http://learnreact.design/atom.xml" rel="self"/>
 <link href="http://learnreact.design"/>
 <updated>2018-01-13T22:39:41-08:00</updated>
 <id>http://learnreact.design/atom.xml</id>
 <author>
   <name>Linton Ye</name>
   <uri>http://learnreact.design</uri>
 </author>

 
 <entry>
   <title>Props and State Re-explained</title>
   <link href="http://learnreact.design/2018/01/15/props-state-reexplained/"/>
   <published>2018-01-15T00:00:00-08:00</published>
   <updated>2017-08-16</updated>
   <id>http://learnreact.design/2018/01/15/props-state-reexplained</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This series of posts will be the very first part of the &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;“React Essentials for Designers” course&lt;/a&gt; I’m creating. &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;Sign up&lt;/a&gt; now and receive exclusive updates!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/06/08/what-is-react/&quot;&gt;What is React?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/06/20/what-is-react-native&quot;&gt;What is React Native?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;React Native vs. Hybrids (coming soon)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/08/16/components-props-state/&quot;&gt;Components, Props and State&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Props and State Re-explained (this post)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/08/16/components-props-state/&quot;&gt;last post&lt;/a&gt;, we’ve covered components, props and state.&lt;/p&gt;

&lt;p&gt;The differences between props and state are fairly apparent, and it seems straightforward to determine when to use props and when to use state. For example, it’s natural to see that the color of the roof is a prop since it’s an intrinsic configuration of the Roof. On the other hand, the status of the door is an obvious candidate for state because it’s easy to see the door being opened or closed after it is built. In this post, however, let’s challenge this line of thinking!&lt;/p&gt;

&lt;p&gt;Seriously?!? Yes, you’ll see that things can be either prop or state. There is no set rule. I’ll show you a more useful, practical way of thinking about props and state.&lt;/p&gt;

&lt;h1 id=&quot;learning-goals&quot;&gt;Learning Goals&lt;/h1&gt;
&lt;p&gt;After reading this post, I’ll get you to come back here. Hopefully you’ll be able to answer these questions easily:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What are the primary use cases for props? What about state?&lt;/li&gt;
  &lt;li&gt;What does “elevating the state” mean? In what situation we need to elevate the state?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;new-guest&quot;&gt;New Guest&lt;/h1&gt;
&lt;p&gt;Did you notice the new guest around our house? Try clicking the door below!&lt;/p&gt;

&lt;p data-height=&quot;452&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;VydPEJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;focuser&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;React House With Cat&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/focuser/pen/VydPEJ/&quot;&gt;React House With Cat&lt;/a&gt; by focuser (&lt;a href=&quot;https://codepen.io/focuser&quot;&gt;@focuser&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This is a sleepy cat – she sleeps as long as the door is closed, and only stands up when the door is open. If you close the door, she falls back asleep right away.&lt;/p&gt;

&lt;h1 id=&quot;implementing-the-cat&quot;&gt;Implementing the Cat&lt;/h1&gt;

&lt;p&gt;Now let me ask you, how to implement this behavior? Let’s give it a try!&lt;/p&gt;

&lt;p&gt;Let’s get started with the “code” below. Take a moment to read it through. (Again this is not real JavaScript code, but a simplified notation that helps you understand the concepts without being distracted by JS subtleties)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Roof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;open&quot; or &quot;closed&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;closed&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is an additional Cat tag in the House component. What does the Cat component look like? Let’s define it.&lt;/p&gt;

&lt;p&gt;The cat can be either sleeping or awake. This seems fairly similar to the status of the door. Perhaps we can use state to represent the status of the cat as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;sleeping&quot; or &quot;awake&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; cat&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this definition of the Cat, the implementation of its aforementioned behavior is all about syncing up the status of the door and that of the cat. You know, when the status of the door is “open”, we want the status of the cat to be “awake”, otherwise, the status of the cat should be “sleeping”.&lt;/p&gt;

&lt;p&gt;Easy peasy? Let’s see…&lt;/p&gt;

&lt;h2 id=&quot;attempt-1&quot;&gt;Attempt 1&lt;/h2&gt;

&lt;p&gt;Since we already have code that toggles the door status according to the current status, why don’t we change the cat status over there as well?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;open&quot; or &quot;closed&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;closed&quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//---&amp;gt; WRONG&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;awake&quot;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//---&amp;gt; WRONG&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, this won’t work! Remember that state is a component’s private data that’s only accessible from within the component itself? Nobody else, whether it’s a parent or sibling, could access a component’s state.&lt;/p&gt;

&lt;p&gt;Here, we are trying to change the status of the cat from within the Door component. It will miserably fail (after converted to real JavaScript code of course).&lt;/p&gt;

&lt;h2 id=&quot;attempt-2&quot;&gt;Attempt 2:&lt;/h2&gt;

&lt;p&gt;Hmm, how about changing the cat status from within the Cat component? That should work, right?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;sleeping&quot; or &quot;awake&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; cat&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;???&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WRONG&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;awake&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, it’s definitely fine to change cat status from within the Cat component. But we would need to read the status of the door to determine what the cat status should be. The status of the door is the state of Door component, and it’s therefore not accessible from within the Cat component!&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Errr! That’s really lame. To keep the door status and the cat status in sync, we definitely need to access both of them somewhere. But it appears that the data is hidden one way or another, by design! How to solve this dilemma?&lt;/p&gt;

&lt;p&gt;The solution requires us to flex our understanding of the use cases of state and props.&lt;/p&gt;

&lt;h3 id=&quot;elevating-door-state&quot;&gt;Elevating Door State&lt;/h3&gt;
&lt;p&gt;If we look at the House component:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, Door and Cat are side by side. Perhaps that’s the place where we can easily sync them up?&lt;/p&gt;

&lt;p&gt;However, we are now inside the House component. For the same reason as our last attempts, it’s impossible to either read the state of Door or change the state of Cat here.&lt;/p&gt;

&lt;p&gt;But what if we use props instead of state?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;awake&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the door is closed, it’d be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;closed&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course the status of the door can’t be a fixed value. It changes from time to time. Let’s denote it with “doorStatus”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;awake&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sleeping&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Didn’t that solve the synchronization problem? By the way, what’s this changing value “doorStatus”? What’s the thing of a component that could change? It’s state, right?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &#39;open&#39; or &#39;closed&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;awake&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sleeping&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bravo! This House component looks fairly well-defined and the statuses of the door and the cat are now perfectly synced up.&lt;/p&gt;

&lt;p&gt;We also need to change the definition of Door and Cat a bit to use props instead of state:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; cat&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you’ve seen, because we want to use the state of a component from its parent, in this case, using Door’s state from within House in order to set the status of the cat, we can represent the same data as the state of the parent and pass the data down to the child as props. This is often called &lt;strong&gt;&lt;em&gt;elevating the state&lt;/em&gt;&lt;/strong&gt;. We are moving the state up in the hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/props-state-reexplained/elevate-state.gif&quot; alt=&quot;remote control&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;changing-house-state&quot;&gt;Changing House State&lt;/h3&gt;
&lt;p&gt;Now that the statuses of the door and the cat are both linked to the state of the house. If we want to open the door or wake up the cat, we’d need to change the state of House.&lt;/p&gt;

&lt;p&gt;Question, what is the only place where we could update the state of House? From within House, right?&lt;/p&gt;

&lt;p&gt;However, we still want to trigger this change from Door. That is, we want the door to open only when the door is clicked, not the entire house, or window etc.&lt;/p&gt;

&lt;p&gt;So the Door component needs to be something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But wait a second, didn’t we say that it was impossible to change the state of House from within the Door component?&lt;/p&gt;

&lt;p&gt;That is right. We cannot &lt;em&gt;directly&lt;/em&gt; change the state of House here. However, nothing prevents us from doing this &lt;em&gt;indirectly&lt;/em&gt;. See this…&lt;/p&gt;

&lt;p&gt;In the House component, let’s write some code to actually change its own state:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &#39;open&#39; or &#39;closed&#39;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;toggleDoorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;closed&#39;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, we haven’t specified &lt;em&gt;when&lt;/em&gt; to run this piece of code. We just assign it a name (“toggleDoorStatus”) so that we can pick it by name and run it later.&lt;/p&gt;

&lt;p&gt;And then we pass down the name to Door as a prop&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClickAction=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggleDoorStatus&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the Door component, we just run this action:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClickAction&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this runs the code named &quot;toggleDoorStatus&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is much like passing the remote control of your TV to someone else. That person presses a button in the Door component. The TV in the House component changes channel or increases its volume.&lt;/p&gt;

&lt;p&gt;What’s going to be performed depends on what kind of remote control is passed into Door. It could control a TV, an air conditioner or a HiFi audio system in House. In the Door component, all that person does is to press the button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/props-state-reexplained/remote-control.gif&quot; alt=&quot;remote control&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s all we need! Here’s the full “code”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &#39;open&#39; or &#39;closed&#39;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;toggleDoorStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;closed&#39;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClickAction=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggleDoorStatus&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doorStatus&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;awake&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sleeping&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClickAction&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; cat&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;props-vs-state-again&quot;&gt;Props vs State, Again&lt;/h1&gt;
&lt;p&gt;Now let’s revisit a couple of questions, what are the differences between props and states? When should we use state, when should we use props?&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-state-when-to-use-props&quot;&gt;When to use state, when to use props?&lt;/h2&gt;
&lt;p&gt;If you remember, I said props are intrinsic properties of a component that don’t change, and state is something that can change after a component is built. This helps when you first learn about the concepts.&lt;/p&gt;

&lt;p&gt;However, the example we’ve just built makes it confusing. Whether a door is open or whether a cat is sleeping definitely seem to be good candidates for state, but we used props to represent them. How so?&lt;/p&gt;

&lt;p&gt;It turns out that there’s a lot of flexibility for choosing between state and props. Depending on how you see it, you can find different ways to model your components. For example you can say the state of the door is that it’s open, or the state of the house is that its door is open.&lt;/p&gt;

&lt;h2 id=&quot;a-more-useful-way-to-understand&quot;&gt;A more useful way to understand&lt;/h2&gt;
&lt;p&gt;Confused? Here’s a more useful way of thinking about the question:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;State: The UI needs to change =&amp;gt; there should be a state somewhere.&lt;/li&gt;
  &lt;li&gt;Props: Use them to pass data &amp;amp; pass control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is something changed in the UI when the app is running, there’s gotta be a state. If you see the door open and close when you click on it. There’s gotta be a state somewhere.&lt;/p&gt;

&lt;p&gt;However, the state does not necessarily need to live right on the updated component. It might be somewhere upstream. It all depends on where and how we need to use the information. For example, we decided to elevate the status of the door from Door component to House component, because we need to use it in the House component.&lt;/p&gt;

&lt;p&gt;On the other hand, props are just something that can be used to pass data downwards in the hierarchy. Just like what we did to pass the value of state isDoorOpen down to the Door component.&lt;/p&gt;

&lt;p&gt;Props can also be used to pass down control. For example, we passed the event handler from House to Door.&lt;/p&gt;

&lt;h2 id=&quot;but-do-the-props-change-value-in-this-case&quot;&gt;But do the props change value in this case?&lt;/h2&gt;
&lt;p&gt;No, they never do and never will. I know, the door opens and closes, and the cat sleeps and wakes up. Since we now use props to represent these, it’s really tempting to think that props behave just like state – their values change, right?&lt;/p&gt;

&lt;p&gt;This is just an illusion, which I find fairly comparable to flipbook animations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/props-state-reexplained/flipbook.jpg&quot; alt=&quot;flipbook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every time when the state of the house changes, the old cat is removed and a brand new cat with new status is created from scratch. But this process happens really quickly, which gives us an illusion that there is only one cat that falls asleep and wakes up.&lt;/p&gt;

&lt;p&gt;The sketches on any page in the flipbook never move. Similarly, the cats stay awake/asleep throughout their (short) lifespan.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Alright, we’ve studied props and state again with a more complex example. In this example, we’d have to keep the statuses of the door and the cat in sync, while the door should still open or close when clicked.&lt;/p&gt;

&lt;p&gt;Because state is private, we decided to &lt;em&gt;elevate&lt;/em&gt; the door status from the state of Door component to the state of House component. This way, we can use this data in House component to set the statuses of the door and the cat. We pass down this data to Door and Cat as props so that they can display correct images according to the door status.&lt;/p&gt;

&lt;p&gt;The other requirement is to trigger state changes when the door is clicked. Because the door status is now a state private to House, from within Door we can only make the change &lt;em&gt;indirectly&lt;/em&gt;. In House, we write the code that actually changes the state, and pass its name down to Door. This is like passing around the remove control of a TV.&lt;/p&gt;

&lt;p&gt;The example in this post may make things a bit confusing. Here’s a practical way of thinking about state and props:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;State: The UI needs to change =&amp;gt; there should be a state somewhere.&lt;/li&gt;
  &lt;li&gt;Props: Use them to pass down data &amp;amp; control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you like it so far? Feel free to leave your comments and questions below!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;endofpost&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>React Sketch.app: backstory and full vision </title>
   <link href="http://learnreact.design/2018/01/02/jon-gold-on-react-sketchapp/"/>
   <published>2018-01-02T00:00:00-08:00</published>
   <updated>2018-01-02</updated>
   <id>http://learnreact.design/2018/01/02/jon-gold-on-react-sketchapp</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/jon-gold/jon-gold.jpg&quot; style=&quot;border-radius: 500px&quot; /&gt;
&lt;img src=&quot;/images/jon-gold/react-sketch-app.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve always been curious about &lt;a href=&quot;https://github.com/airbnb/react-sketchapp&quot;&gt;React Sketch.app&lt;/a&gt; and how it might forever change the workflow of designers and developers. Recently I had the fortune to chat with Airbnb’s &lt;a href=&quot;https://twitter.com/jongold&quot;&gt;Jon Gold&lt;/a&gt;, the creator of React Sketch.app. This post is about the backstory and Jon’s full vision of the tool.&lt;/p&gt;

&lt;p&gt;TLDR; React Sketch.app was built to solve a somewhat niche issue faced by large design teams at Airbnb’s scale. The full vision is however way beyond Sketch and has the potential to influence the entire design industry – it’s about designing with components and rendering components everywhere. To use it to its full potential, build your components based on react-primitives as much as possible.&lt;/p&gt;

&lt;p&gt;If you want the juicy details and a peek into the future (and some cool videos and screenshots), read on!&lt;/p&gt;

&lt;h2 id=&quot;why-building-it&quot;&gt;Why building it?&lt;/h2&gt;
&lt;p&gt;Airbnb has a large team of designers and engineers. They want to encourage designers to be using their design system and streamline the communication between designers and engineers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have a design system at Airbnb. The system has probably 200+ components. We have 100 designers and probably almost 1000 engineers. The current workflow is: the design system team creates the system. And we have a production design team who creates and updates the (Sketch) templates for all the design system files. Most of the time we’d love people to be using the system. That’s one goal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another goal is that we want absolute minimum of the time between design and engineering. There’s potentially back-and-forth of annotating specs, doing redlines and all that stuff. With any friction like that, times by the number of designers and engineers, the relationship becomes not scalable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, the central artifacts in this workflow, the design system templates, tend to get out of sync with implementations very quickly, which make them not as useful as they should be.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(In order to create the design system templates, ) We played around smart symbols in Sketch. But essentially it’s a big Sketch file stored on Dropbox. That has the tendency of getting out of sync quite like how the code is. We have iOS, Android, Web and React Native – all different codebases. It’s very possible that the engineering implementations are out of sync with themselves. There is a huge possibility that the design system templates get out of sync with any of the implementations. There are so many chances of failure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;With Sketch files, there’s not really much you can do. You have those human-updated things. It’s kind of fine if you have 5 components. But if you have 500 components, that’s a huge sketch file. The possibility of things being out of sync with so many moving parts is huge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They set out to solve the synchronization issue with code, and use code as the only source of truth. Boom! React Sketch.app was born.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What we wanted to do with the system as a whole was to make 100% of the time everything is right everywhere. You can solve that pretty easily in code. You can have scripts that generate swift or java files to keep code in sync. (You can do) diffing, testing and all those things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;So we were like, what if we just render the sketch file? We just created a React wrapper and render it (to sketch file).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s the stuff you can play with in React Sketcha.app… You can write code to generate static sketch files, you can feed it with data, you can use react-primitive, real components etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;full-vision&quot;&gt;Full vision&lt;/h2&gt;
&lt;p&gt;Now here’s the fun part. Although React Sketch.app solves a practical issue very well, Jon only considers it as the step number one. When he started talking about his full vision, I could see the sparkles in his eyes.&lt;/p&gt;

&lt;h3 id=&quot;render-everywhere&quot;&gt;Render everywhere&lt;/h3&gt;

&lt;p&gt;To Jon, Sketch is just one of the many possible render targets. We should be able to render components anywhere.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s not we just render things to Sketch. It’s like we can use cross-platform components and render them everywhere and build whatever input/output things we want for them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t know if you’ve seen the project we’ve done recently. It takes hand-drawn design and use AI to render it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Converting sketches to code—our design technology team shares their first exploration into AI assisted design ✏️💻 &amp;gt; &lt;a href=&quot;https://t.co/qSshvcEtqu&quot;&gt;https://t.co/qSshvcEtqu&lt;/a&gt; &lt;a href=&quot;https://t.co/hyEr42y6Ey&quot;&gt;pic.twitter.com/hyEr42y6Ey&lt;/a&gt;&lt;/p&gt;&amp;mdash; Airbnb Design (@Airbnbdesign) &lt;a href=&quot;https://twitter.com/Airbnbdesign/status/922970398169350144?ref_src=twsrc%5Etfw&quot;&gt;October 24, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another (example) is a &lt;a href=&quot;http://www.jon.gold/2017/08/dragging-rectangles/&quot;&gt;blog post&lt;/a&gt; I wrote about using markdown as a design tool. None of these actually render to Sketch. They could render to Sketch if you want them to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/jon-gold/literate-dls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So I guess the full picture is something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jon-gold/input-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The implication is that when you use React components as the centerpiece connecting multiple mediums, as a designer, you’d have a lot of freedom in choosing whatever tool that fits in your workflow.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s about what we can do if we can render any components anywhere and come up with any way of rendering these things. The idea is that we can create the best input/output mechanisms for ourselves, and other designers can also create the best input/output mechanism for themselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;design-with-components&quot;&gt;Design with components&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The thing I’m trying to push is about getting designers to think in terms of components. Once you can render any component, as a designer, you can create any tools you want… You can create a markdown tool that renders to Sketch, you can create an AI tool that renders to the browser, you can create an AI that renders to Sketch. This whole thing is a lot more than rendering React components to Sketch… If you can learn React, you can do whatever you want, you’ll be like superheros.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know, not every designer has the time or skills to create tools for herself/himself. But what’s important is to have this mindset of components, which I think works hand in hand with &lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;Atomic Design&lt;/a&gt;. 
Once you are aware of all the possibilities, you’ll be open to new world of tools that may boost your productivity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You want to be able to design with these components parametrically. You want to be able to say I have a component that has a boolean state and you can toggle it. You just want to see what it looks like. Maybe it has a filled background I can toggle with a boolean state. Or maybe it has a checkbox, or maybe it has an array of data, or an image…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To help designers design with components, Jon and his team is working on something pretty cool:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-video&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;FAQ: &amp;quot;but why would you want to render React Native components to webviews or Sketch?&amp;quot;&lt;br /&gt;me: &amp;quot;hold my kombucha&amp;quot;&lt;br /&gt;&lt;br /&gt;⚛️💎 &lt;a href=&quot;https://t.co/D0yTtMjMVS&quot;&gt;pic.twitter.com/D0yTtMjMVS&lt;/a&gt;&lt;/p&gt;&amp;mdash; ¸„.-•~¹°”ˆ˜¨ ĴÖŅ ĠÖĻĐ ¨˜ˆ”°¹~•-.„¸ (@jongold) &lt;a href=&quot;https://twitter.com/jongold/status/866854672421634049?ref_src=twsrc%5Etfw&quot;&gt;May 23, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s a Sketch plugin you can browse your components from your React Native code base, you can drag them into Sketch and render them in Sketch because it just uses react-primitives that React Sketch.app knows how to render.  We’ve built a control panel similar to symbol’s control panel where you can change the parameters, booleans that kind of thing for a component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s a game changer! Imagine that your design is always 100% consistent with what’s in production. Fonts, spacing, colors, drop shadows – all look exactly the same as in the app. When the production components change, your design gets automatically updated. No more taking new screenshots to design upon.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sketch symbols are just not the real thing. This whole movement is about trying to get designers to design with the real things. Use the components parametrically as they are designed. So you are always designing with the real truth of things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a-foundation-for-building-new-design-tools&quot;&gt;A foundation for building new design tools&lt;/h3&gt;
&lt;p&gt;React Sketch.app also makes it easier for tool developers to interact with Sketch. I’m not familiar with Sketch’s CocaScript-based API, but I suppose it’s not something super pleasant to work with. React Sketch.app takes care of a lot of heavylifting and you can just write React code to render things on the canvas. This makes it easier to build new tools/plugins for Sketch.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s a flexible enough tool, it’s like a foundational technology that people can use to make everything else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Archetype is one of these tools, where you can design a typography system in the browser and export to Sketch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jon-gold/archetype.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another example is the component picker that Jon is working on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The custom UI we built (the component picker) renders a webview (in Sketch) and then renders React inside that webview. Because we use react-primitives for React components, we can render the same component side-by-side, in the webview (as part of the UI) and in the Sketch canvas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You only need to write tiny bit of CocaScript (to build the UI). (I guess CocaScript is a pain in the butt?) React is the whole thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;big-requirement-for-this-full-vision-react-primitives&quot;&gt;Big requirement for this full vision: react-primitives&lt;/h2&gt;
&lt;p&gt;The prospect of being able to bring our components anywhere we go sounds amazing. However, the very first requirement is that our components must be cross-platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lelandrichardson/react-primitives&quot;&gt;react-primitives&lt;/a&gt; provides an abstraction that enables us to write cross-platform components. The idea is that if you use react-primitives as much as possible, your components will be future proof.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a designer, when you design a design system, rather than thinking in terms of span, h1, you think in terms of view, text, image, that’d make everything so much easier. all of these cross-platform tools, with all the combination of inputs and outputs, they work a lot easier if you can use only one set of standardized API for describing components instead of a different set of API for every single platform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, it’s not without any challenges. For example, when it comes to migrating an existing codebase that was built for a specific platform, say, Web.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The real hurdle is that when people have an app built with React-dom, h1, span etc. How do I convert this? I don’t have a good answer. We just haven’t got there yet. I have a feeling that you can probably write a transformer, some kind of codemod which converts for example h1 to Text, span to Text etc. But this seems like a really difficult problem. But we’ll get there eventually, because the Airbnb website is still a react-dom app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you have components that have been built with React Native in mind, at least for simple components, switching to react-primitives is easy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So what do you think about React Sketch.app and Jon’s full vision so far? To me, the most compelling aspect is being able to design with real components that are 100% in sync with implementation.&lt;/p&gt;

&lt;p&gt;As a designer, if you can think, communicate and design with the same notion of &lt;em&gt;components&lt;/em&gt; as used by engineers, that’ll save a lot of back-and-forth time and even enable new ways of collaboration. As a result, the team will create better products and better experiences faster. Everyone wins!&lt;/p&gt;

&lt;p&gt;Are you ready to design with components?&lt;/p&gt;

&lt;h3 id=&quot;but-but-we-are-a-small-team-how-are-we-supposed-to-use-react-sketchapp&quot;&gt;But, but, we are a small team, how are we supposed to use React Sketch.app?&lt;/h3&gt;

&lt;p&gt;People have been using React Sketch.app to define their design systems and create templates. But what’s beyond that? Is it useful at all for small teams? Have you tried to integrating React Sketch.app into your workflow? What are your findings so far?&lt;/p&gt;

&lt;p&gt;Perhaps we can try to explore something together? &lt;a href=&quot;mailto:linton@jimulabs.com&quot;&gt;Email me&lt;/a&gt; and I’d love to exchange some thoughts with you!&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;endofpost&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--
One thing I found convenient is, instead of generating a full page, you can convert components into Sketch symbols and then use these symbols in your design. This way, when the component changes, those symbols will be updated and you still get to keep your custom design you&#39;ve done in the good old Sketch workflow. There&#39;s also some [interesting discussion](https://github.com/airbnb/react-sketchapp/issues/172
) about generating a Sketch library from components.
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Components, Props and State</title>
   <link href="http://learnreact.design/2017/08/16/components-props-state/"/>
   <published>2017-08-16T00:00:00-07:00</published>
   <updated>2017-08-16</updated>
   <id>http://learnreact.design/2017/08/16/components-props-state</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This series of posts will be the very first part of the &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;“React Essentials for Designers” course&lt;/a&gt; I’m creating. &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;Sign up&lt;/a&gt; now and receive exclusive updates!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/06/08/what-is-react/&quot;&gt;What is React?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/06/20/what-is-react-native&quot;&gt;What is React Native?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;React Native vs. Hybrids (coming soon)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Components, Props and State (this post)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2018/01/15/props-state-reexplained/&quot;&gt;Props and State Re-explained&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Today let’s study the three most important concepts in React: components, props and state, and the differences between props and state.&lt;/p&gt;

&lt;p&gt;As in previous posts, I’ll attempt to use plain English to explain the concepts. So, no JavaScript knowledge is required to read this post.&lt;/p&gt;

&lt;p&gt;In fact, you won’t find any JavaScript code here at all. Instead, I’ll use a simple notation &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; to help you understand the main ideas first before diving into JavaScript (in future posts). I believe this spoon-feeding 🥄 approach is an effective way to learn React (or any technologies) especially if you don’t have much programming experience – mixing React concepts and JavaScript subtleties can be quite overwhelming!&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;learning-goals&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;learning-goals&quot;&gt;Learning Goals&lt;/h1&gt;
&lt;p&gt;After reading this post, I’ll get you to come back here. Hopefully you’ll be able to answer these questions easily:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is a prop?&lt;/li&gt;
  &lt;li&gt;What is state?&lt;/li&gt;
  &lt;li&gt;When to use props and when to use state?&lt;/li&gt;
  &lt;li&gt;How to make the window openable?&lt;/li&gt;
  &lt;li&gt;Can you write the psedocode for &lt;a href=&quot;/2017/06/08/what-is-react/#domo-hat&quot;&gt;Domo’s hat&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lets-build-a-house&quot;&gt;Let’s build a house&lt;/h1&gt;
&lt;p&gt;To understand what these concepts are and how to use them, let’s build a simple example. What about a house? (Try clicking the door)&lt;/p&gt;

&lt;p data-height=&quot;480&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;EXBOpx&quot; data-default-tab=&quot;result&quot; data-user=&quot;focuser&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;React House&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/focuser/pen/EXBOpx/&quot;&gt;React House&lt;/a&gt; by focuser (&lt;a href=&quot;https://codepen.io/focuser&quot;&gt;@focuser&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;components&quot;&gt;Components&lt;/h1&gt;
&lt;p&gt;If you remember what we’ve discussed in an &lt;a href=&quot;/2017/06/08/what-is-react/&quot;&gt;early post&lt;/a&gt;, components are one of the three pillars of React. Building an app in React is almost all about working with components.&lt;/p&gt;

&lt;p&gt;The very first step is to break down the UI into various components. For example, we can break down our house this way:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/props-states/1-house-components.png&quot; alt=&quot;house break down&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s code it!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Roof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait a second, isn’t that some sort of HTML? That’s right! Some parts of React code look very similar to HTML, and that, by design, is to make it easy for web designers to understand and write the code. How nice is that!&lt;/p&gt;

&lt;p&gt;So, in the code above, we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; container which is pretty much the same as in HTML. Things like &lt;code class=&quot;highlighter-rouge&quot;&gt;Roof&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Wall&lt;/code&gt; are custom tags/components that we are going to define soon.&lt;/p&gt;

&lt;p&gt;Remind you, the above isn’t exactly real React code – there’s no JavaScript at all. For now, let me just use loose syntax and plain English to explain what’s in there. Once you understand the ideas behind the scene, the next step is to learn the nitty gritty of JavaScript and convert the ideas into real code.&lt;/p&gt;

&lt;p&gt;To make things easier to understand, I’ll use another simplification: instead of using images as you saw at the beginning of this post, for now let’s make a super simple web app that displays plain text for everything.&lt;/p&gt;

&lt;p&gt;The roof is just a div with some plain text:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Roof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;roof&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other components are the same – they are just plain text inside a HTML div. Let’s look at the complete, React-ish code for our house:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Roof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  


&lt;span class=&quot;nl&quot;&gt;Roof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;roof&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;nl&quot;&gt;Wall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;wall&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;nl&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;window&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;nl&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;door&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is not hard to understand, right? House is made up of Roof, Wall, Window and Door, which are all made up of plain text.&lt;/p&gt;

&lt;p&gt;In the end, React will generate HTML like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;roof&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;wall&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;windows&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;door&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-roof-color-with-props&quot;&gt;Configure roof color with Props&lt;/h1&gt;

&lt;p&gt;Imagine that we send a sheet of specification to a factory where all the individual parts are built. In the specification, we can tell the factory about the intrinsic properities of the parts: the color of the roof, the shape of the door etc. After the roof and the door are built according to our request, those properties will stay the same. So the roof remains blue, and the door remains a rectangle. They won’t change at all.&lt;/p&gt;

&lt;p&gt;In React, we call these properties &lt;em&gt;Props&lt;/em&gt; which is basically short for properties. Remember two things about props: first, we determine the value of a prop and use it as part of the blueprint BEFORE a component is built. Second, the value of a prop will never change.&lt;/p&gt;

&lt;p&gt;So how does a prop look like in the code? In the House component, if we want our roof to be blue, we can simply add a prop “color” to the Roof tag. This is like specifying the color in the specification to be sent to the factory.&lt;/p&gt;

&lt;p&gt;It looks very similiar to HTML tags where where you can add attributes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Roof&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How is the roof actually built? Let’s write the code for it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Roof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; roof&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it? Right! There are a few things worth mentioning here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The HTML-ish code that defines a component is a &lt;strong&gt;template&lt;/strong&gt;, not just a single HTML tag. This means we can put &lt;em&gt;placeholders&lt;/em&gt; in it to output variations of HTML content without repeating ourselves. (Remember &lt;a href=&quot;/images/what-is-react/09-thinker-with-hat.png&quot;&gt;this picture of Domo’s hat&lt;/a&gt;? That’s the idea of placeholders!) In this example, for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Roof color=&quot;blue&quot; /&amp;gt;&lt;/code&gt;, we’ll get &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;blue roof&amp;lt;div&amp;gt;&lt;/code&gt;; for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Roof color=&quot;red&quot; /&amp;gt;&lt;/code&gt;, we’ll get &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;red roof&amp;lt;/div&amp;gt;&lt;/code&gt;, so on and so forth.&lt;/li&gt;
  &lt;li&gt;The curly brackets used in the template tells React that we are gonna use a placeholder here, instead of plain content.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; can be think of as a container of all the prop values set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Roof&lt;/code&gt; tag. So suppose we have &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Roof color=&quot;blue&quot; material=&quot;wood&quot; /&amp;gt;&lt;/code&gt;, we can then use both &lt;code class=&quot;highlighter-rouge&quot;&gt;props.color&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;props.material&lt;/code&gt; in the definition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Roof&lt;/code&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;open-the-door-with-state&quot;&gt;Open the door with State&lt;/h1&gt;
&lt;h2 id=&quot;add-state-to-a-component&quot;&gt;Add state to a component&lt;/h2&gt;
&lt;p&gt;Another thing that a component can have is called &lt;em&gt;state&lt;/em&gt;. What is a state? It’s something that can change AFTER a component is built.&lt;/p&gt;

&lt;p&gt;For example, the door can be either open or closed. We say the status of the door is a state because its value can change even after the door is built. This is different from a prop like the shape of the door which does not change once the door is created.&lt;/p&gt;

&lt;p&gt;The change of a state value is often caused by some external event. For a web app, it’s usually user input, or data from a server or the passage of time that’d change the state of a component.&lt;/p&gt;

&lt;p&gt;Let’s add the state to the door:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &quot;open&quot; or &quot;closed&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Door is &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Very similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; is a container of all the state values in the component. Therefore, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;state.[something]&lt;/code&gt; inside the template in the component definition.&lt;/p&gt;

&lt;h2 id=&quot;change-the-state-on-user-input&quot;&gt;Change the state on user input&lt;/h2&gt;

&lt;p&gt;Next, let’s make the door interactive by adding some “code” that handles user input.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &quot;open&quot; or &quot;closed&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Door is &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Handle user input&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pulled&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;open&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;door&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pushed&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;closed&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key thing here is that the state of a component changes from time to time. The output of the template, i.e. the generated HTML, changes accordingly and automatically.&lt;/p&gt;

&lt;p&gt;BTW: Don’t forget that the above isn’t real React code. Don’t copy and paste it into your project! Things will get ugly… 💣&lt;/p&gt;

&lt;h2 id=&quot;state-is-private&quot;&gt;State is private&lt;/h2&gt;

&lt;p&gt;The state is private to a component. Whether the door is open or closed is only the door’s business. It has nothing to do with the house, or other components. In fact we can just take the door out of the house, it can still be open or closed on its own.&lt;/p&gt;

&lt;p&gt;Therefore, the door’s state is only visible inside the Door component. Within the Door component, we can only read or change its own state.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;House:
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Door&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This is WRONG --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;The door is {Door.state.status}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

Window:
  ...
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This is WRONG --&amp;gt;&lt;/span&gt;
  change Door.state.status to &#39;open&#39;

Door:
  ...
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Man, this is WRONG too! --&amp;gt;&lt;/span&gt;
  if House.state.isForSale
    make the door openable by the realtor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Here we go, that’s props and state. Props are configuration of a component whose values are determined before the component is created. Just like the shape of the door, or the color of the roof, props always stay the same. On the other hand, state is a component’s private data that’s available only after the component is created. Just like whether the door is open or closed, state changes from time to time. Usually it’s a response to user input, or something that happens on the server, or the passage of time.&lt;/p&gt;

&lt;p&gt;But, but, we haven’t built anything real, right? Plus, how useful is it to create an app that just displays plain text? I know, at least you want to see how to build the house that you see at the beginning of the post – something colorful that you can click on, right?&lt;/p&gt;

&lt;p&gt;Not surprisingly, that requires JavaScript coding which would make this post too long. I’ll leave it to future posts. If you don’t want to wait, sign up for &lt;a href=&quot;/react-mini/&quot;&gt;my free email course&lt;/a&gt; where things are taught in videos. The JavaScript fun starts at day 4!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes:&lt;/h1&gt;

&lt;p&gt;&lt;a name=&quot;endofpost&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;In techie terms, the notation that describes the main ideas but not real code is called &lt;em&gt;pseudocode&lt;/em&gt;. It’s not meant for computers to execute. It’s a tool for us humans to formalize thoughts and communicate with others. Remember, pseudocode won’t work on a computer, it’s fairly &lt;a href=&quot;https://encrypted.google.com/search?q=define:pseudo&amp;amp;hl=en&quot;&gt;pseudo&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>What Is React Native?</title>
   <link href="http://learnreact.design/2017/06/20/what-is-react-native/"/>
   <published>2017-06-20T00:00:00-07:00</published>
   <updated>2017-06-23</updated>
   <id>http://learnreact.design/2017/06/20/what-is-react-native</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This series of posts will be the very first part of the &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;“React Essentials for Designers” course&lt;/a&gt; I’m creating. &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;Sign up&lt;/a&gt; now and receive exclusive updates!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/06/08/what-is-react/&quot;&gt;What is React?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;What is React Native? (this post)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;React Native vs. Hybrids (coming soon)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/08/16/components-props-state/&quot;&gt;Components, Props and State&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/06/08/what-is-react/&quot;&gt;previous post&lt;/a&gt;, we looked at what React is and what makes it special. Today let’s study React Native: what it’s for, where it came from, how it’s different from React and why it’s a big deal.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;learning-goals&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;learning-goals&quot;&gt;Learning Goals&lt;/h1&gt;
&lt;p&gt;I’ll get you to come back here after reading this post. Hopefully you’ll be able to answer these questions easily:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is React Native? Why does its name include “Native”?&lt;/li&gt;
  &lt;li&gt;Why is React Native cool?&lt;/li&gt;
  &lt;li&gt;What can we build with React Native? What about React?&lt;/li&gt;
  &lt;li&gt;Where does ReactDOM come from? What does it do?&lt;/li&gt;
  &lt;li&gt;What does a React Renderer do?&lt;/li&gt;
  &lt;li&gt;How does React Sketch.app work?&lt;/li&gt;
  &lt;li&gt;How does ReactVR work?&lt;/li&gt;
  &lt;li&gt;What is ReactJS? React.js?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;beyond-the-web&quot;&gt;Beyond The Web&lt;/h1&gt;
&lt;p&gt;By now you probably have this picture in your head:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/1-react-summary.png&quot; alt=&quot;what is React Summary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You see, React is a great tool for building user interfaces &lt;em&gt;on the web&lt;/em&gt;. With React, you can build the UI by describing what you want instead of how to update the UI (reactive UI), organize the code in reusable components, and create performant UI without worrying about DOM the slowpoke (virtual DOM). More and more web developers choose React because it allows them to focus on a bigger picture instead of low-level details. We call this way of building the UI &lt;em&gt;React paradigm&lt;/em&gt;. A paradigm is basically the way how you think about a problem and how you describe it and its solution&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;That’s great for web apps. What about other platforms, such as iOS and Android? Wouldn’t it be great if you could apply the same &lt;em&gt;React paradigm&lt;/em&gt; to the development of mobile apps?&lt;/p&gt;

&lt;p&gt;In a way, mobile platforms work in the same fashion as the Web. There is a model (a tree guy). There is something that creates visual elements according to the model (an artist). Not surprisingly, the traditional way of building a mobile UI is to directly manipulate the tree model and tell it how to update things (directly talk with the tree guy). This has similar shortcomings as directly working with the DOM in a web browser. React can definitely help on that.&lt;/p&gt;

&lt;p&gt;Similarities aside, mobile platforms are different from the Web, and they are different from each other. In the past, developers had to learn the specific language and toolchain of a platform in order to build apps for it.&lt;/p&gt;

&lt;p&gt;This is like working with exotic studios where the staff speak various different languages. You’d have to learn all the new languages to communicate with those models. It doesn’t sound easy, does it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/2-ios-android.png&quot; alt=&quot;studio &amp;quot;iOS&amp;quot; and studio &amp;quot;Android&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, if you wanted to build native apps for both iOS and Android, you had to create two completely separate codebases. The same business logic had to be implemented twice. It was difficult and expensive to create an app and even more so to maintain it in the long run.&lt;/p&gt;

&lt;p&gt;That is why React Native was created. Let’s see how it makes things a lot easier.&lt;/p&gt;

&lt;h1 id=&quot;react-native&quot;&gt;React Native&lt;/h1&gt;

&lt;h2 id=&quot;renderers-and-the-new-react&quot;&gt;Renderers And The New React&lt;/h2&gt;
&lt;p&gt;For web apps, React takes care of enabling the React paradigm (managing reactive UI, components and virtual DOM), as well as actually updating the DOM in the browser (talking with Domo). When the DOM is the only thing it needs to interact, React can easily handle both tasks.&lt;/p&gt;

&lt;p&gt;However, for mobile apps, things get challenging when it’s necessary to manage various tree models on different platforms. If we keep adding more responsibilities on React’s shoulders, it’ll start driving our poor superhero crazy &lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/2.5-crazy.png&quot; alt=&quot;talk to many tree folks and crazy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To deal with this, the creators of React split the original React into two parts. The first part is the new React which focuses on enabling the React paradigm. The second part is called ReactDOM, whose only job is to interact with DOM in the browser. Because ReactDOM updates DOM which determines what is &lt;em&gt;rendered&lt;/em&gt; on the browser, we say ReactDOM is a &lt;em&gt;renderer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Back to our story, imagine that our superhero takes off his cloak&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; and sprinkles some magic dust.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/3-cloak-and-dust.png&quot; alt=&quot;cloak and magical dust&quot; /&gt;&lt;/p&gt;

&lt;p&gt;His cloak goes alive and becomes his helper. Freed from the burden of dealing with Domo, React can now concentrate on what he does the best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/4-reactdom-domo.png&quot; alt=&quot;ReactDOM talks to Domo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This separation of roles is a powerful idea. It makes it easy to write new &lt;em&gt;renderers&lt;/em&gt; that adapt to new platforms while maintaining a shared core. Powered by the renderers for iOS and Android, you can now build apps for both platforms in &lt;strong&gt;a single language and the same React paradigm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/5-renderers.png&quot; alt=&quot;renderers to talk to Web, iOS and Android&quot; /&gt;
&lt;em&gt;React focuses on his thing. Renderers do the talk.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-complete-platform&quot;&gt;A Complete Platform&lt;/h2&gt;
&lt;p&gt;The official definition of React is: A JavaScript library for building user interfaces. Its meaning is twofold: first it’s a great tool for UI, second it doesn’t include anything else.&lt;/p&gt;

&lt;p&gt;In fact, &lt;strong&gt;you can’t build a full application with just React alone&lt;/strong&gt;. You’d need for example CSS for styling, webpack for preprocessing and bundling the code, Firebase for persisting the data and many other things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/6-other-folks-at-web.png&quot; alt=&quot;other folks at Web Browser&quot; /&gt;
&lt;em&gt;The studio “Web Browser” is actually a lot busier than what you’ve seen.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is fine in the context of web development because as a JavaScript library, React fits naturally with the other parts which are either JavaScript libraries too or are designed to work well with JavaScript libraries. After all, JavaScript is the language of the Web.&lt;/p&gt;

&lt;p&gt;However, things are different for mobile platforms where various languages and technologies are in use. It becomes important to include a full package of tools that can be used in the same way as React, in JavaScript. Therefore, React Native was born.&lt;/p&gt;

&lt;p&gt;Compared to React on the Web, React Native includes a lot more stuff:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the new React as its core (our cloakless superhero),&lt;/li&gt;
  &lt;li&gt;renderers for iOS and Android,&lt;/li&gt;
  &lt;li&gt;tools that convert and bundle code into installable apps,&lt;/li&gt;
  &lt;li&gt;native UI widgets (status bar, ListView etc.) and animations,&lt;/li&gt;
  &lt;li&gt;toolkit for styling and laying out the UI (flexbox),&lt;/li&gt;
  &lt;li&gt;essential parts that make up of most apps (such as networking),&lt;/li&gt;
  &lt;li&gt;parts that provide native functionalities such as clipboard, accelerometer and storage.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We say React Native is a complete platform itself because &lt;strong&gt;it includes all you need to build a full app&lt;/strong&gt;. In comparison, the original React is only in charge of web UI and you’ll need to include other parts yourself to create a web app&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/7-summon.png&quot; alt=&quot;other superheros&quot; /&gt;
&lt;em&gt;The formation of React Native&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;native-ui&quot;&gt;Native UI&lt;/h2&gt;
&lt;p&gt;Have you ever wondered why React Native is labeled &lt;em&gt;Native&lt;/em&gt;? That’s actually its branding feature: the UI built with React Native consists of &lt;strong&gt;native UI widgets&lt;/strong&gt; that perform well and look/feel consistent, not some simulated crap wrapped in a WebView. The apps built with React Native are often indistinguishable from the apps written in native languages such as Swift and Java.&lt;/p&gt;

&lt;p&gt;You know, those little things, such as scrolling acceleration, animations, keyboard behavior and drop shadows, actually play an important role in the user experience of your app. If those are not consistent with other apps on the phone, users will quickly get frustrated.&lt;/p&gt;

&lt;p&gt;I originally intended to explain here what “native” really means and why React Native performs better. But my notes quickly grew into a full page after a few brainstorming sessions. Let’s leave that as a future post of its own.&lt;/p&gt;

&lt;p&gt;For now, I want you to just remember that native UI is one of the great things that make React Native shine.&lt;/p&gt;

&lt;p&gt;So here you go, React Native is a complete platform that allows you to build truly native apps following React paradigm, in JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/8-react-native-summary.png&quot; alt=&quot;React Native key points summary&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;react-sketchapp-reactvr-react-xyz&quot;&gt;React Sketch.app, ReactVR, React XYZ…&lt;/h1&gt;
&lt;p&gt;Recently Airbnb recently released a nifty tool called &lt;a href=&quot;https://airbnb.design/painting-with-code/&quot;&gt;React Sketch.app&lt;/a&gt; which converts React code into image layers in Sketch. Can you guess how it works?&lt;/p&gt;

&lt;p&gt;Right! It’s essentially React Native with a renderer who talks to the tree model in Sketch!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reactjs-react-native/9-sketch.png&quot; alt=&quot;React Native team and Sketch Renderer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because React Sketch.app is based on React Native, which is a full package, we can do fancy things like fetching data from a real API and rendering it in Sketch.&lt;/p&gt;

&lt;p&gt;In the meantime, many other variations of React Native are created to support building apps for &lt;a href=&quot;https://github.com/Microsoft/react-native-windows&quot;&gt;Windows&lt;/a&gt;, &lt;a href=&quot;https://github.com/ptmt/react-native-macos&quot;&gt;macOS&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react-vr&quot;&gt;VR&lt;/a&gt; etc.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This means, as long as you master the essence of React,  you can build apps for a gazillion of platforms (and counting), in JavaScript, with the same pattern of thinking. As
the creators of React Native nicely put, &lt;strong&gt;“learn once, write anywhere”&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;hands-on-time&quot;&gt;Hands-on Time!&lt;/h1&gt;
&lt;p&gt;So much talking so far! Do you want to try something on your phone?&lt;/p&gt;

&lt;p&gt;I’m excited too! Grab your phone and follow me!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On your phone, download the Expo app. You can either download from here: &lt;a href=&quot;https://itunes.apple.com/app/apple-store/id982107779?pt=17102800&amp;amp;ct=www&amp;amp;mt=8&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://play.google.com/store/apps/details?id=host.exp.exponent&quot;&gt;Android&lt;/a&gt;, or search “Expo” in the App Store. The app’s icon looks like &lt;img src=&quot;/images/reactjs-react-native/expo-ios.jpg&quot; /&gt; (or &lt;img src=&quot;/images/reactjs-react-native/expo-android.png&quot; /&gt; on Android).&lt;/li&gt;
  &lt;li&gt;On your computer, open this page: &lt;a href=&quot;https://snack.expo.io/&quot;&gt;https://snack.expo.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;On your phone, launch the Expo app and tap “Scan QR Code”&lt;/li&gt;
  &lt;li&gt;Scan the QR code displayed on your computer. You should see a green “Device connected” message if everything works fine.&lt;/li&gt;
  &lt;li&gt;If the QR code does not automatically disappear, close it by clicking the little cross on the top right of the page. You should see a code editor.&lt;/li&gt;
  &lt;li&gt;Delete everything in the editor, Paste &lt;a href=&quot;https://gist.githubusercontent.com/lintonye/5cb3c11349591bf475b91573682fe688/raw/4ea0d4562ce45c1ba3867a1759359e1f86bb590a/domohat.jsx&quot;&gt;this code&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;What do you see on your phone?&lt;/li&gt;
  &lt;li&gt;If you want, you can change the code in the editor and see the result on your phone right away!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll explain this environment in detail in the future. For now, just remember that it’s like Codepen (the tool I used to show you the Domo’s hat example in the previous post) for React Native.&lt;/p&gt;

&lt;p&gt;If you compare the &lt;a href=&quot;https://gist.github.com/lintonye/5cb3c11349591bf475b91573682fe688&quot;&gt;React Native version&lt;/a&gt; of the code with the &lt;a href=&quot;https://codepen.io/focuser/pen/gROrXx&quot;&gt;React (Web) version&lt;/a&gt;, you’ll notice that they look very similar. They both go like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thinker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Below is the React Native version&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// For Web version, replace &quot;View&quot; with &quot;div&quot;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThinkerWithHat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thinker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Hat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HatSwitcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;“Learn once, write anywhere”! Remember?&lt;/p&gt;

&lt;h1 id=&quot;what-about-reactjs-and-reactjs&quot;&gt;What About ReactJS And React.js?&lt;/h1&gt;
&lt;p&gt;You might have heard ReactJS (or React.js) a lot – and I used it too. In fact it’s never an official name &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. The official name has always been “React” since the &lt;a href=&quot;https://web.archive.org/web/20130529213355/https://facebook.github.io/react/&quot;&gt;day one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because JavaScript libraries tend to be named “XyzJS” or “Xyz.js” and React is a JavaScript library, perhaps people just appended “JS” or “.js” to its name voluntarily. Since React was a library for the web in the beginning, many people use ReactJS or React.js to refer to React on the Web, the duo of React and ReactDOM.&lt;/p&gt;

&lt;p&gt;Following the de facto convention, when I say ReactJS, I mean React on the Web too.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Awesome! We’ve gone over quite a few things so far. We’ve learned a bit of history of React and how React Native is put together. Being a complete platform, React Native includes everything that you need to build native apps in JavaScript and React paradigm. React Native now supports many platforms including iOS, Android, Windows, macOS, Sketch.app and even VR. “Learn once, write anywhere”!&lt;/p&gt;

&lt;p&gt;In the next post, we’ll look at what a &lt;em&gt;native&lt;/em&gt; app really is and why React Native is one of the best ways to build native apps.&lt;/p&gt;

&lt;p&gt;I encourage you to go back to the &lt;a href=&quot;#learning-goals&quot;&gt;Learning Goals&lt;/a&gt; to see if you can answer all the questions. Let me know if you have any questions or comments!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Want to learn more about React? &lt;a href=&quot;http://learnreact.design&quot;&gt;Sign up&lt;/a&gt; now and receive exclusive updates!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;backstage&quot;&gt;Backstage&lt;/h1&gt;
&lt;h2 id=&quot;illustrations&quot;&gt;Illustrations&lt;/h2&gt;
&lt;p&gt;I am fortunate to work with &lt;a href=&quot;https://beebeeye.github.io&quot;&gt;Beebee Ye&lt;/a&gt;, who is an excellent illustrator and storyteller. His illustrations have made these posts really unique and fun to read.&lt;/p&gt;

&lt;h2 id=&quot;revisions&quot;&gt;Revisions&lt;/h2&gt;
&lt;p&gt;As usual, this post has gone through many edits. What’s special here though, is that I’ve almost completely rewritten the whole thing hearing that I’ve taken the metaphors too far.&lt;/p&gt;

&lt;p&gt;I really appreciate your constructive suggestions that pushed me to rewrite it, &lt;a href=&quot;https://twitter.com/Yitong_Zhang&quot;&gt;Yitong Zhang&lt;/a&gt;, Brittany Smart, &lt;a href=&quot;https://disqus.com/by/lostpixel/&quot;&gt;Grant Robinson&lt;/a&gt;, Jason Fuller and Victoria Pugh. Thanks a ton!&lt;/p&gt;

&lt;p&gt;If you are curious, check out &lt;a href=&quot;/2017-06-20-what-is-react-native-metaphor/&quot;&gt;the previous version&lt;/a&gt; that’s full of fantasy stories 🌈🦄  😆.&lt;/p&gt;

&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;a name=&quot;endofpost&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Remember declarative and imperative programming? They are both paradigms. The &lt;strong&gt;React paradigm&lt;/strong&gt; is about how to break down UI into components, how to pass data around etc., which we’ll study in detail later. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;In reality, it’d drive the maintainers of React crazy. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;Well, the cloak is the only thing that I could think of can be &lt;em&gt;split&lt;/em&gt; off from the superhero without any damage. Bear with me! &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;If you are looking for a in-depth technical comparison between React Native and React Web, check out this &lt;a href=&quot;https://medium.com/@alexmngn/from-reactjs-to-react-native-what-are-the-main-differences-between-both-d6e8e88ebf24&quot;&gt;post&lt;/a&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;The idea of React Renderers is very powerful. Here are &lt;a href=&quot;https://github.com/chentsulin/awesome-react-renderer&quot;&gt;a list&lt;/a&gt; of cool renderers that make it possible to build many different things with React. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;In NPM, the central repository for JavaScript libraries, you can find both &lt;a href=&quot;https://www.npmjs.com/package/reactjs&quot;&gt;reactjs&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;react&lt;/a&gt;. Can you tell which one is the real React? &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>What Is React?</title>
   <link href="http://learnreact.design/2017/06/08/what-is-react/"/>
   <published>2017-06-08T00:00:00-07:00</published>
   <updated>2017-06-08</updated>
   <id>http://learnreact.design/2017/06/08/what-is-react</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This series of posts will be the very first part of the &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;“React Essentials for Designers” course&lt;/a&gt; I’m creating. &lt;a href=&quot;http://learnreact.design/re4d/&quot;&gt;Sign up&lt;/a&gt; now and receive exclusive updates!&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;What is React? (this post)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/06/20/what-is-react-native/&quot;&gt;What is React Native?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;React Native vs. Hybrids (coming soon)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2017/08/16/components-props-state/&quot;&gt;Components, Props and State&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2018/01/15/props-state-reexplained/&quot;&gt;Props and State Re-explained&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;React, ReactJS, React.js, React Native… How many times have you heard about these things lately? Are you confused by what they are really for?&lt;/p&gt;

&lt;p&gt;If you are a designer in a team that uses (or is considering using) React, or if you are simply curious about this “React” thing, these posts are for you.&lt;/p&gt;

&lt;p&gt;In plain English and doodles🌴🎄, I’ll explain the terms in React family and dive into what makes React so special. No coding knowledge is required at this point, but we’ll roll up the sleeves and get our hands dirty with code soon enough. I want you to get familiar with a few concepts first so you don’t feel like you’re in the deep end when we get there. You can always come back here if you need to review anything in the future.&lt;/p&gt;

&lt;p&gt;Are you ready? Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;learning-goals&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;learning-goals&quot;&gt;Learning Goals&lt;/h1&gt;
&lt;p&gt;After reading this post, I’ll get you to come back here. Hopefully you’ll be able to answer these questions easily:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is DOM?&lt;/li&gt;
  &lt;li&gt;What is React? Where does it fit in the development of an app?&lt;/li&gt;
  &lt;li&gt;How is React different from jQuery?&lt;/li&gt;
  &lt;li&gt;What are the core ideas in React?&lt;/li&gt;
  &lt;li&gt;Why do we need Virtual DOM?&lt;/li&gt;
  &lt;li&gt;What is a reactive UI?&lt;/li&gt;
  &lt;li&gt;What are some benefits of components?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-couple-of-things-about-web&quot;&gt;A Couple Of Things About Web&lt;/h1&gt;
&lt;p&gt;Let’s begin with a couple of other terms that you might have heard of for years. The first one, DOM.&lt;/p&gt;

&lt;h2 id=&quot;dom&quot;&gt;DOM&lt;/h2&gt;
&lt;p&gt;Well, DOM is the Document Object Model. Simple? It’s an object model for the document. Right?&lt;/p&gt;

&lt;p&gt;Forget about it. Let’s check out the prestigious art studio “Web Browser”! Can you find DOM in the doodle below?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/02-domo-browsera.png&quot; alt=&quot;Domo poses, Browsera draws&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, DOM is a … tree? Yup a tree! Oddly enough, a lot of things in your computer look like a tree&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Let’s give DOM a nickname… ummm what about Domo? Domo works as a model at the studio “Web Browser”. His job is to pose in front of the artist who paints a portrait (or perhaps millions of portraits).&lt;/p&gt;

&lt;p&gt;The portraits are what we see in the web browser when visiting a website. A developer’s job is like that of a director who tells Domo what to wear and what pose to make.  This determines what those portraits look like in the end. jQuery or React are known as libraries and they are the tools a developer uses to communicate with Domo.&lt;/p&gt;

&lt;h2 id=&quot;jquery&quot;&gt;jQuery&lt;/h2&gt;
&lt;p&gt;jQuery is a JavaScript library that makes it easier for a developer to manipulate the DOM. How does it fit in the story of Domo?&lt;/p&gt;

&lt;p&gt;It is a tool that makes it easier for the developer to talk to Domo, just like a phone. You can call him wherever you are, whenever you want. It’s a lot more convenient than before (raw JavaScript) – remember the time when people had to be physically close enough to have a conversation before the invention of telephones?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/04-jquery-phone.png&quot; alt=&quot;Use phone with a label &amp;quot;jQuery&amp;quot; to talk to Domo, or perhaps just a phone with label&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For years we have been using jQuery to directly communicate with Domo. It’s handy but not without issues.&lt;/p&gt;

&lt;h1 id=&quot;react&quot;&gt;React&lt;/h1&gt;
&lt;p&gt;Let me introduce you to the new superhero, React:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/05-model-agent.png&quot; alt=&quot;React, model agent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With React, developers no longer directly talk to Domo. React acts as a middleman between a developer and Domo. He smoothes out the communication and streamlines the process of portrait creation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/06-middleman.png&quot; alt=&quot;React as a middleman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React has a few tricks to address the issues of jQuery and other tools. Here are his three main tricks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reactive UI&lt;/li&gt;
  &lt;li&gt;Virtual DOM&lt;/li&gt;
  &lt;li&gt;Components&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reactive-ui&quot;&gt;Reactive UI&lt;/h2&gt;
&lt;p&gt;To update the DOM with jQuery, you’d have to specify what element to change at the right time, in the right order. This is equivalent to describing to Domo how to position his head, arms and legs step by step, for each and every portrait.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/07-step-by-step.png&quot; alt=&quot;sequential commands about how to pose&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Heck, this sounds tedious and error-prone! Why can’t you just tell Domo &lt;strong&gt;what&lt;/strong&gt; you want instead of &lt;strong&gt;how&lt;/strong&gt; to pose&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/08-thinker.png&quot; alt=&quot;a few sketches of yoga poses on a piece of paper, in sketched tree forms, or perhaps just stickman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even cooler, imagine if you can leave placeholders in your request to represent different variations of a same pose. React does that too!&lt;/p&gt;

&lt;p&gt;This way, when somebody asks for portraits of Domo wearing a different hat, you don’t have to talk to Domo again. You can just sit back and let him change it himself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/09-thinker-with-hat.png&quot; alt=&quot;Sketch with ornaments placeholders, Domo with different ornaments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This trick is how React got its name. The UI built with React is &lt;strong&gt;reactive&lt;/strong&gt;. As a developer, you just need to write down &lt;strong&gt;what&lt;/strong&gt; you want and React figures out &lt;strong&gt;how&lt;/strong&gt; to do it. When data change, your UI changes accordingly. You don’t need to worry about updating the DOM, React does it for you automatically. The idea of reactive UI greatly simplifies UI development.&lt;/p&gt;

&lt;p&gt;I know I said you don’t need any coding knowledge but just to help put things in perspective, I’ve popped this in. Check out this example (try changing Domo’s hat):&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;domo-hat&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p data-height=&quot;375&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;gROrXx&quot; data-default-tab=&quot;result&quot; data-user=&quot;focuser&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Reactive UI&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/focuser/pen/gROrXx/&quot;&gt;Reactive UI&lt;/a&gt; by focuser (&lt;a href=&quot;https://codepen.io/focuser&quot;&gt;@focuser&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I’ll explain its full code in a future post, but at this point you can just look at this core piece:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThinkerWithHat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Hat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thinker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that you just need to define what you want (a thinker with a hat), and “wire up” the data (“&lt;code class=&quot;highlighter-rouge&quot;&gt;type = {hat}&lt;/code&gt;”). When the data change (user selects a hat), the UI updates automatically.&lt;/p&gt;

&lt;h2 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h2&gt;
&lt;p&gt;Another issue of jQuery is about the speed.&lt;/p&gt;

&lt;p&gt;As a demanding director, you hate waiting. You want the portraits to come out as quickly as possible. However, Domo and the artist are slow. Not really as slow as a sloth, but it takes time for Domo to change clothes and poses, and it takes time for the artist to paint.&lt;/p&gt;

&lt;p&gt;Worse, you’d have to wait for the artist to finish a portrait before being able to talk to Domo again. In fact you cannot do anything but wait. What a waste of time!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/10-slow-dom.png&quot; alt=&quot;Domo and Browsera tell customer to wait, customer has a lot more requests, customer is frustrated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React pulls another trick to fix that. He’s very fast at drawing quick sketches. Almost immediately after you tell him your instructions, he’s done with a sketch and ready to take the next order. Now no more wait! You can keep telling React about the portraits you want, nonstop. React keeps record of everything with sketches and show it to Domo at the right time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/11-sketches.png&quot; alt=&quot;React looks at a pile of sketches, quickly builds sketches and arrange them in a queue; Domo poses according to a sketch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More importantly, React is smart. He can sort through the sketches, remove any duplication and make sure that Domo and the artist do as little work as possible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/12-optimize-sketches.png&quot; alt=&quot;React holds two sketch trees in each hand, similar poses, and tells Domo to only lift up his leg (or whatever minor adjustment)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These sketches are called “Virtual DOM”. Virtual DOM is much faster to manipulate than DOM. Developers work with Virtual DOM most of the time instead of directly managing DOM. React handles the dirty work of managing the slow DOM.&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;p&gt;The third trick of React is the concept of components.&lt;/p&gt;

&lt;p&gt;Components should be straightforward to understand because it’s the way how our real world works. Our cars, houses and even our bodies are all made up of identifiable components that are individual, functional units. These components are made up of smaller components which consist of even smaller components, all the way down to atoms.&lt;/p&gt;

&lt;p&gt;If you are familiar with Sketch, components are a lot like &lt;a href=&quot;https://www.sketchapp.com/learn/documentation/symbols/&quot;&gt;symbols&lt;/a&gt;. Building an app in React is almost all about working with components: finding the best components for the job, fitting one with another, creating new components from existing ones etc.&lt;/p&gt;

&lt;p&gt;Back to our studio “Web Browser”, you describe your requirement for portraits as components, React translates it into what Domo understands. This saves you a lot time because you don’t have to repeat common parts in your instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/13-components.png&quot; alt=&quot;sketch made up of components&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another cool thing about components is that, if you change a component, everything that includes this component will be updated automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/what-is-react/14-hair-style.png&quot; alt=&quot;change hair style&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Alright. Hopefully you’ve learned a bit about React. It’s essentially a tool that helps developers manipulate DOM to build user interfaces. Reactive UI, Virtual DOM and components are the three core ideas that make React special. Of course there are other interesting ideas, such as unidirectional data flow, which I’ll unfold in a future post.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/06/20/what-is-react-native/&quot;&gt;next post&lt;/a&gt;, we’ll look at how things like ReactJS, React Native and React Sketch.app relate to and different from each other.&lt;/p&gt;

&lt;p&gt;I encourage you to go back to the &lt;a href=&quot;#learning-goals&quot;&gt;Learning Goals&lt;/a&gt; to see if you can answer all the questions. Let me know if you have any questions or comments!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Want to learn more about React? &lt;a href=&quot;http://learnreact.design&quot;&gt;Sign up&lt;/a&gt; now and receive exclusive updates!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;backstage&quot;&gt;Backstage&lt;/h1&gt;
&lt;h2 id=&quot;who-drew-the-illustrations&quot;&gt;Who drew the illustrations?&lt;/h2&gt;
&lt;p&gt;Many people asked if I did it myself. Well, I wish I could. 😅 My doodles are like &lt;a href=&quot;/linton-doodles-2017&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These illustrations were generously crafted by &lt;a href=&quot;https://beebeeye.github.io/&quot;&gt;Beebee Ye&lt;/a&gt; who has also been instrumental in making sure the post is actually understandable.&lt;/p&gt;

&lt;p&gt;BTW: Learning to draw is one of my life goals – hopefully I could show you some better doodles of my own in a few years. 🤔  We’ll see…&lt;/p&gt;

&lt;h2 id=&quot;my-8-yo&quot;&gt;My 8 yo&lt;/h2&gt;
&lt;p&gt;At the beginning, I set a goal that this post must be interesting enough for my 8 year old daughter to read, and easy enough for her to understand a couple of things.&lt;/p&gt;

&lt;p&gt;😀 At least she can recall that DOM is a tree and React talks to DOM.&lt;/p&gt;

&lt;p&gt;She also contributed a few hats in the interactive example above and watched me putting them into the code. That was golden time! Guess which ones were drawn by her? My daughter wants you to answer in the &lt;a href=&quot;#endofpost&quot;&gt;comments&lt;/a&gt;. 👧🏻&lt;/p&gt;

&lt;iframe width=&quot;96&quot; height=&quot;54&quot; src=&quot;https://www.youtube.com/embed/o1SL_j5U8AQ?showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;special-thanks&quot;&gt;Special thanks&lt;/h2&gt;
&lt;p&gt;I feel so lucky that so many of you are interested in this post. I want to thank everyone who has taken the time to read the early drafts, and sent me encouraging words and insightful suggestions.&lt;/p&gt;

&lt;p&gt;I want to express my deep gratitude to &lt;a href=&quot;http://philkhoo.com/&quot;&gt;Phil Khoo&lt;/a&gt; of &lt;a href=&quot;http://demingfactor.com/&quot;&gt;DemingFactor&lt;/a&gt; who volunteered to be the editor of this post. Man, his suggestions are really what make this post to shine! Thank you again Phil!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes:&lt;/h1&gt;

&lt;p&gt;&lt;a name=&quot;endofpost&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Fair enough, in reality, computers are not compost containers stuffed with tree branches. The tree notion comes from how people organize information in a way that’s easy for computers to process. People typically draw charts which remotely resemble upside-down trees, like &lt;a href=&quot;https://www.w3schools.com/js/pic_htmltree.gif&quot;&gt;this&lt;/a&gt; or &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Core/images/table.gif&quot;&gt;this&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;In fancy tech slang, if the code defines &lt;strong&gt;what&lt;/strong&gt; you want, it’s called &lt;em&gt;declarative&lt;/em&gt;; if it defines &lt;strong&gt;how&lt;/strong&gt; you want it to be done, it’s called &lt;em&gt;imperative&lt;/em&gt;. Imperative programming emerged from the day when computers were first invented. When the computers were primitive, people had to instruct them in detail: where to store the numbers, how to multiply etc. It was fine at the beginning, but coding this way becomes increasingly unmanageable as the tasks given to computers become more and more complex. People then wrote smart software that convert definition of problems into detailed instructions. Declarative programming was born. Today, more and more programming languages and frameworks, such as React, allow us to code declaratively instead of imperatively. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>React Course for Designers, Anyone?</title>
   <link href="http://learnreact.design/2017/05/09/react-for-designers-interviews/"/>
   <published>2017-05-09T00:00:00-07:00</published>
   <updated>2017-05-09</updated>
   <id>http://learnreact.design/2017/05/09/react-for-designers-interviews</id>
   <content type="html">&lt;p&gt;Should designers code? This is an eternal question.&lt;/p&gt;

&lt;p&gt;I believe designers and developers should both learn a bit about the profession of the other side. Armed with a holistic understanding of how design and engineering fit together to create great products, we will become better designers and better developers.&lt;/p&gt;

&lt;p&gt;As a developer who’s benefited from learning design, I’m convinced that designers want to learn some coding as well. That is why I got so excited about creating a React course tailored for designers (excited about the course too? Sign up &lt;a href=&quot;http://learnreact.design&quot;&gt;here&lt;/a&gt; and I’ll keep you in the loop).&lt;/p&gt;

&lt;p&gt;Wait a second. Am I just thinking in the vacuum though? I decided to &lt;a href=&quot;https://www.designernews.co/stories/82837-react-native-course-for-designers-anyone&quot;&gt;ask Designer News&lt;/a&gt;. The result? I was totally blown away! The post has been the top story for more than a day and stayed on the front page for more than a week. Shortly after the post, 13 designers booked a call with me and wished to offer help. Wow! 13 real people were willing to spare 30 minutes out of their busy schedules to talk to a complete stranger – me. There must be something that resonates with them!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/designer-interviews/interview-calendar.png&quot; alt=&quot;My Interview Calendar&quot; /&gt;
&lt;br /&gt;
&lt;em&gt;[ My calendar got quickly filled up by meeting requests ]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post is a report of the interviews that I’ve done so far. Hopefully you will be inspired to learn some React as well after reading about your peers’ opinions.&lt;/p&gt;

&lt;p&gt;If you feel generous to help me shape the course too, I’m really excited to talk to you! Please schedule a call with me &lt;a href=&quot;https://calendly.com/lintonye&quot;&gt;here&lt;/a&gt;! I will keep this post updated with your new thoughts and opinions.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve asked quite a few questions and got great responses. They fall in the following 5 categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Interviewee background&lt;/li&gt;
  &lt;li&gt;Should designers code?&lt;/li&gt;
  &lt;li&gt;Why do you want to learn React?&lt;/li&gt;
  &lt;li&gt;What do you want to learn about React?&lt;/li&gt;
  &lt;li&gt;How do you learn coding?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main body of this post consists of quotes that I found interesting and my comments. Let’s now dive in!&lt;/p&gt;

&lt;h1 id=&quot;interviewee-background&quot;&gt;Interviewee background&lt;/h1&gt;
&lt;p&gt;Most interviewees are UX/UI designers working on mobile or web projects. A few of them said they have an engineering background but decided to pursue design as a career.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;
&lt;p&gt;Nearly everyone I talked to uses &lt;a href=&quot;https://www.sketchapp.com/&quot;&gt;Sketch&lt;/a&gt; for prototyping. &lt;a href=&quot;http://www.adobe.com/products/aftereffects.html&quot;&gt;After Effects&lt;/a&gt; and &lt;a href=&quot;https://www.invisionapp.com/&quot;&gt;InVision&lt;/a&gt; are also frequently mentioned. To my surprise, nearly half of the interviewees use &lt;a href=&quot;https://framer.com/&quot;&gt;Framer&lt;/a&gt; which requires coding to take advantage of its full capability.&lt;/p&gt;

&lt;p&gt;I also learned about a couple of tools that are popular but I’ve never heard of. They are &lt;a href=&quot;http://principleformac.com/&quot;&gt;Principle&lt;/a&gt; for prototyping and &lt;a href=&quot;https://zeplin.io/&quot;&gt;Zeplin&lt;/a&gt; for design hand-off.&lt;/p&gt;

&lt;h2 id=&quot;programming-experience&quot;&gt;Programming experience&lt;/h2&gt;
&lt;p&gt;Two interviewees have experience in full-stack development alongside design. But the majority of people I’ve talked to don’t have much coding experience. They have various experience in HTML and CSS, and are somewhat familiar with JavaScript.&lt;/p&gt;

&lt;p&gt;Encouragingly, quite a few of them have tried some coding bootcamps or online tutorials to try to learn Swift, React etc.&lt;/p&gt;

&lt;h1 id=&quot;should-designers-code&quot;&gt;Should designers code?&lt;/h1&gt;
&lt;p&gt;What I found is that designers, at least those who I’ve talked to, are actually quite motivated to code. This doesn’t mean that they want to build everything on their own. But they are well aware of the benefits of involving coding into their workflow and want to learn more about technology.&lt;/p&gt;

&lt;p&gt;Below are discussions that touch down the core problem of designer-developer collaboration, the benefits for a designers to understand technology and its implication on creativity.&lt;/p&gt;

&lt;p&gt;More interestingly, some designers use coding, notably Framer, to do design itself. I believe this trend will have a profound impact on how UI design is done.&lt;/p&gt;

&lt;h2 id=&quot;designer-developer-collaboration&quot;&gt;Designer-developer collaboration&lt;/h2&gt;
&lt;p&gt;Before the interviews, I have an assumption that there is a communication gap between designers and developers. I’m trying to bridge this gap by helping designers understand a bit more about how a developer’s job is like.&lt;/p&gt;

&lt;p&gt;It’s interesting to hear designers talking about their own pain points.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Designers and developers speak different languages, the jargons are different.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Design and engineering uses different part of the brain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Designers are very aware that working with engineers is super important and there is a lot of motivation on the designer’s side to make that relationship (with developers) as good as possible. But motivation isn’t always enough if you don’t understand anything about the coding side. It’s very easy, especially as a junior designer, to propose things that are annoyingly completely out of scope, ridiculous and have no bearing on reality. Even if you are very motivated to work as well as possible with engineers, that can be frustrating because there’s so much that you don’t understand about what their job is like. So I think it is a problem and there’s a lot of energy behind solving it right now, which is great.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a designer, when you create an animation, you’ll have to pass it over to a developer to implement it. But the developer might be busy with other things and probably don’t have a chance to implement it for a couple of months. The animation will just sit there. It may be pretty but until it is implemented in the app and distributed to people, your value isn’t quite there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Designers for the most part have no understanding of code but are interested in contributing their designs into the apps they’re working on though limited by the the dev resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The communication problem (between designers and developers) is often caused by the lack of empathy for the other person, a developer would think that the designer is just doing the modification of the UI, a designer would think the developer is just writing code and not thinking about the vision and UX.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;when-a-designer-understands-technology&quot;&gt;When a designer understands technology…&lt;/h2&gt;
&lt;p&gt;Benefits:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once you have an holistic view of how design and engineering interacts, there is no doubt about how it will help the team to reach better / more efficient way to achieve the goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t write code, but I can understand the developer saying we are using HTML5 and CSS3. I know certain attributes that the language has, for example, transparency and gradient. I know that I don’t have to give assets for all these things that can be directly implemented in the code. If you are aware of certain capability of the technology, the communication becomes easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your designer have the technology background, you can create mockups that are based on reality, not something that’s functionally wrong or broken.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;…the time you spend on learning a new thing, versus the time you’ll save in the future by using the new knowledge. In the short term, it makes sense to stick on what you are really good at. But skills that you are already good at are hard to make better. If you start something new, it won’t take as much time to grow it to a useful level. At the end you’ll have this amount of Sketch skill and this amount of coding skill. This is a lot more powerful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Implications:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you are bound by a tool (coding), it hampers your creativity, because you start thinking in terms of the capability of the tool. For me, my favorite starting point is still pen and paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;using-coding-to-design&quot;&gt;Using coding to design&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’ve been using coding to do most of my design. Because once you’ve done design in code, I just realized it’s really easy to change and swap the order, randomize photos inside a layout. Even though it has some learning curve, but once you start making some concepts, suddenly it starts saving a lot of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Direct benefit is copy and paste. When you start a new project, it often has some similarity to what you’ve worked on previously. If you use code, you can copy and paste, you can change the variables so everything is changed all at once. You can change a value globally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I use Framer which uses CoffeeScript. Technically it’s not the code that a developer can copy and paste, but still it’s really easier for them to read, compared to just looking at a video and guess what needs to be done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;No matter they like it or not, designers are now aware that coding is one of the options for design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;why-do-you-want-to-learn-react&quot;&gt;Why do you want to learn React?&lt;/h1&gt;
&lt;p&gt;The most popular motivation is that they are working on a project that uses React (either ReactJS&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; or React Native). They want to know how to work with developers better, and they want to have more direct influence on the project.&lt;/p&gt;

&lt;p&gt;Interestingly, many people are not really aware of (or care about) the difference between React Native and ReactJS. I told them that the good news is React as a concept is the same. Once you learn one of the two, it’s straightforward to pick up the other.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We just hired a React Native developer. I’m interested in learning how to work with React Native developers because I haven’t done so before.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;(My company uses React) I feel helpless a lot when I want to make changes. All our engineers are in India and Russia. (the designer is in the US) A lot of times there are small style changes. I would love to be able to go and just make it myself. I can’t at the moment. Sometimes I have ideas that I’d like to build on my own, my portfolio included, but I just don’t have the skill set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want to take time to learn a new skill because It will further my career. It’d be great if I’m able to call my project manager or engineer about something that’s said to be impossible in React Native, and I can say, well, actually it is possible. It kinda helps. You can have a really interesting conversation if you know something about the technology. For example, I’d want to use shadows blurred in my design. (But the developer told me) that’s not possible because we are using this library in React Native, and we’d have to update the library and have to this and that. I was like, well, Is it really the truth? I’ve seen apps that have blurred shadows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It seems more and more people are using ReactJS. What I’m looking is to understand a bit more how it works, what options are, what it can or cannot do. Not necessarily building a complete app on my own. But when you are working with a client, it’d be good to know the language a bit better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are also some really interesting discussions about including React into their design workflow:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have Sketch style guides that we keep in sync with our designers. The engineers have style guides in React Storybook. But Ideally we should only have a single source of truth we can all just draw from. For me, I’d like to learn enough about React that I can make small changes to the React Storybook and then push out to the rest of designers in Sketch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I heard the React Sketch app from Airbnb. That’s something that actually motivated me to start thinking, maybe I should learn some React. With Framer, the only way to save a picture is to take a screenshot. If the developer wants something I draw with code, I have to trace back to Sketch or PhotoShop, which is annoying. But if there is an option to convert code into images (in Sketch), I have options. I can export it PNG, JPG, SVG. I think that’s really cool for most designers. It’s good for documentation as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;what-do-you-want-to-learn-about-react&quot;&gt;What do you want to learn about React?&lt;/h1&gt;
&lt;p&gt;There seems a consensus that designers want to learn about React in terms of what it can and cannot do at a high level. Meanwhile, a few interviewees have expressed the interest to learn how to build a full app since they want to build their own ideas.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Would like to know about the technology in terms of capability and technical boundary, but not specifically deep dive into code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;What I want to learn is not necessarily how to write apps myself, but be able to collaborate with the developer on a higher level, say, to know what his constraints are, what he can do, so I can provide him with documents and files that are easier for him to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s important for designers to know what constraints are, what can’t be done in React Native, but can in Swift or Objective-C. .. Not necessarily how the thing is made, but what can be made. What are the differences between platforms. For the designers, the things that they need to perform their jobs the best they can.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I just figured that the deliverables (required by RN) are different from what I’m used to. I would have issues with SVG because React Native doesn’t like SVG files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want to be able to edit it (the code), but not necessarily interested in coding the whole thing by myself. There’s somebody whose job is to do that…. In web development, I can always go into the file and find what’s not working the way I wanted, and change it. It’s helpful to send him (the developer) a code snippet for the drop shadow, or hex code, so he doesn’t have to tweak the thing himself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I want to learn to build a full app, just to get my hands dirty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In my case, I’m interested in learning how to structure my code, and things like Redux and Mobx.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;how-do-you-learn-coding&quot;&gt;How do you learn coding?&lt;/h1&gt;
&lt;p&gt;Designers are really motivated in learning coding as self-improvement. They’ve taken online courses on sites such as Code School, CodeAcademy, Lynda, went to workshops, attended webinars etc.  I’m proud of you, my friends!&lt;/p&gt;

&lt;p&gt;Here are just a couple of examples:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve gone through all Apple’s Swift classes, SkillShare classes and learn with a full-stack developer friend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;After learning Framer, I tried some other languages. I’m learning Swift these days. One thing I realized was that compared to prototyping, the actual programming languages, such as Swift and Java, are more strict about how you write code. I found that’s too much for what I want. I just want to use code to configure the design without doing too much labor intensive work that I used to do with Sketch or PhotoShop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I am thrilled! I think many designers are motivated to learn coding. React is one of their favorite topics.&lt;/p&gt;

&lt;p&gt;Are you inspired to pick up some React as well? Sign up &lt;a href=&quot;http://learnreact.design&quot;&gt;here&lt;/a&gt;, and I’ll send you an email when something is ready.&lt;/p&gt;

&lt;h1 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h1&gt;
&lt;p&gt;I’d like to thank everyone who spent your precious time to chat with me, made a comment or upvoted my post. Your insights will really have a huge influence on the course. Together, let’s create something truly useful for designers!&lt;/p&gt;

&lt;p&gt;My special thanks to these fantastic folks (sorted by last name):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dribbble.com/JTerrellAllen&quot;&gt;J. Terrell Allen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dribbble.com/casualmess&quot;&gt;Jovana Andjelkovic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://olafurbreidfjord.com/&quot;&gt;Olafur Breidfjord&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://medium.com/@arle13&quot;&gt;Jinju Jang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Antti Kareinen&lt;/li&gt;
  &lt;li&gt;Sure Lee&lt;/li&gt;
  &lt;li&gt;Rutuja Rasam&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.benpepin.com/&quot;&gt;Ben Pepin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/arjunphlox&quot;&gt;Arjun Phlox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://design.tobysilverman.com/&quot;&gt;Toby Silverman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Brittany Smart&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vaska.com/&quot;&gt;Jeffery Vaska&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@jerrywang&quot;&gt;Jerry Wang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://beebeeye.github.io/&quot;&gt;Beebee Ye&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Footnotes:&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;endofpost&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;It seems Facebook has &lt;a href=&quot;https://web.archive.org/web/20130529213355/https://facebook.github.io/react/&quot;&gt;never officially used&lt;/a&gt; the name “ReactJS” or “React.js”. It’s just “React”. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 

</feed>
